package com.Wsdl2Code.WebServices.CTwalkService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 11/23/2015 2:51:36 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class City implements KvmSerializable {
    
    public int CityId;
    public boolean CityIdSpecified;
    public int CountryId;
    public boolean CountryIdSpecified;
    public String Geography;
    public double Lat;
    public boolean LatSpecified;
    public double Lng;
    public boolean LngSpecified;
    public String LocalName;
    public String Name;
    public int StateId;
    public boolean StateIdSpecified;
    
    public City(){}
    
    public City(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("CityId"))
        {
            Object obj = soapObject.getProperty("CityId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                CityId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                CityId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CityIdSpecified"))
        {
            Object obj = soapObject.getProperty("CityIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                CityIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                CityIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("CountryId"))
        {
            Object obj = soapObject.getProperty("CountryId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                CountryId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                CountryId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CountryIdSpecified"))
        {
            Object obj = soapObject.getProperty("CountryIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                CountryIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                CountryIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Geography"))
        {
            Object obj = soapObject.getProperty("Geography");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Geography = j.toString();
            }else if (obj!= null && obj instanceof String){
                Geography = (String) obj;
            }
        }
        if (soapObject.hasProperty("Lat"))
        {
            Object obj = soapObject.getProperty("Lat");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Lat = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                Lat = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LatSpecified"))
        {
            Object obj = soapObject.getProperty("LatSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                LatSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                LatSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Lng"))
        {
            Object obj = soapObject.getProperty("Lng");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Lng = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                Lng = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LngSpecified"))
        {
            Object obj = soapObject.getProperty("LngSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                LngSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                LngSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("LocalName"))
        {
            Object obj = soapObject.getProperty("LocalName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                LocalName = j.toString();
            }else if (obj!= null && obj instanceof String){
                LocalName = (String) obj;
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Name = j.toString();
            }else if (obj!= null && obj instanceof String){
                Name = (String) obj;
            }
        }
        if (soapObject.hasProperty("StateId"))
        {
            Object obj = soapObject.getProperty("StateId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                StateId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                StateId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StateIdSpecified"))
        {
            Object obj = soapObject.getProperty("StateIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                StateIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                StateIdSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return CityId;
            case 1:
                return CityIdSpecified;
            case 2:
                return CountryId;
            case 3:
                return CountryIdSpecified;
            case 4:
                return Geography;
            case 5:
                return Lat;
            case 6:
                return LatSpecified;
            case 7:
                return Lng;
            case 8:
                return LngSpecified;
            case 9:
                return LocalName;
            case 10:
                return Name;
            case 11:
                return StateId;
            case 12:
                return StateIdSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 13;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CityId";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "CityIdSpecified";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CountryId";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "CountryIdSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Geography";
                break;
            case 5:
                info.type = Double.class;
                info.name = "Lat";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "LatSpecified";
                break;
            case 7:
                info.type = Double.class;
                info.name = "Lng";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "LngSpecified";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LocalName";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "StateId";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "StateIdSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
