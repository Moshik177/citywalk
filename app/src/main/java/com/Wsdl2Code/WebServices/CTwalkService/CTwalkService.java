package com.Wsdl2Code.WebServices.CTwalkService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 11/23/2015 2:51:36 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.CTwalkService.WS_Enums.*;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

public class CTwalkService {
    
    public String NAMESPACE ="CTwalkService";
    public String url="";
    public int timeOut = 180;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public CTwalkService(){}
    
    public CTwalkService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public CTwalkService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public CTwalkService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void GetAllCountriesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllCountriesAsync(null);
    }
    
    public void GetAllCountriesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllCountries(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllCountries", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllCountries(){
        return GetAllCountries(null);
    }
    
    public Output GetAllCountries(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllCountries");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllCountries", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllCountries", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddCategoryAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddCategoryAsync(json, null);
    }
    
    public void AddCategoryAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddCategory(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddCategory", result);
                }
            }
        }.execute();
    }
    
    public Output AddCategory(String json){
        return AddCategory(json, null);
    }
    
    public Output AddCategory(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddCategory");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddCategory", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddCategory", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllCategoriesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllCategoriesAsync(null);
    }
    
    public void GetAllCategoriesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllCategories(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllCategories", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllCategories(){
        return GetAllCategories(null);
    }
    
    public Output GetAllCategories(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllCategories");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllCategories", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllCategories", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddSubCategoryAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddSubCategoryAsync(json, null);
    }
    
    public void AddSubCategoryAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddSubCategory(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddSubCategory", result);
                }
            }
        }.execute();
    }
    
    public Output AddSubCategory(String json){
        return AddSubCategory(json, null);
    }
    
    public Output AddSubCategory(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddSubCategory");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddSubCategory", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddSubCategory", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllSubCategoriesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllSubCategoriesAsync(null);
    }
    
    public void GetAllSubCategoriesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllSubCategories(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllSubCategories", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllSubCategories(){
        return GetAllSubCategories(null);
    }
    
    public Output GetAllSubCategories(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllSubCategories");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllSubCategories", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllSubCategories", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddSubCategoryTypeAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddSubCategoryTypeAsync(json, null);
    }
    
    public void AddSubCategoryTypeAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddSubCategoryType(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddSubCategoryType", result);
                }
            }
        }.execute();
    }
    
    public Output AddSubCategoryType(String json){
        return AddSubCategoryType(json, null);
    }
    
    public Output AddSubCategoryType(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddSubCategoryType");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddSubCategoryType", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddSubCategoryType", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllSubCategoryTypesBySubCategoryIDAsync(int subCategoryID,boolean subCategoryIDSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllSubCategoryTypesBySubCategoryIDAsync(subCategoryID, subCategoryIDSpecified, null);
    }
    
    public void GetAllSubCategoryTypesBySubCategoryIDAsync(final int subCategoryID,final boolean subCategoryIDSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllSubCategoryTypesBySubCategoryID(subCategoryID, subCategoryIDSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllSubCategoryTypesBySubCategoryID", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllSubCategoryTypesBySubCategoryID(int subCategoryID,boolean subCategoryIDSpecified){
        return GetAllSubCategoryTypesBySubCategoryID(subCategoryID, subCategoryIDSpecified, null);
    }
    
    public Output GetAllSubCategoryTypesBySubCategoryID(int subCategoryID,boolean subCategoryIDSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllSubCategoryTypesBySubCategoryID");
        soapReq.addProperty("subCategoryID",subCategoryID);
        soapReq.addProperty("subCategoryIDSpecified",subCategoryIDSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllSubCategoryTypesBySubCategoryID", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllSubCategoryTypesBySubCategoryID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllSubCategoryTypesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllSubCategoryTypesAsync(null);
    }
    
    public void GetAllSubCategoryTypesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllSubCategoryTypes(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllSubCategoryTypes", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllSubCategoryTypes(){
        return GetAllSubCategoryTypes(null);
    }
    
    public Output GetAllSubCategoryTypes(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllSubCategoryTypes");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllSubCategoryTypes", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllSubCategoryTypes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddCategorySubCategoryAssociationAsync(int categoryId,boolean categoryIdSpecified,int subCategoryId,boolean subCategoryIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddCategorySubCategoryAssociationAsync(categoryId, categoryIdSpecified, subCategoryId, subCategoryIdSpecified, null);
    }
    
    public void AddCategorySubCategoryAssociationAsync(final int categoryId,final boolean categoryIdSpecified,final int subCategoryId,final boolean subCategoryIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddCategorySubCategoryAssociation(categoryId, categoryIdSpecified, subCategoryId, subCategoryIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddCategorySubCategoryAssociation", result);
                }
            }
        }.execute();
    }
    
    public Output AddCategorySubCategoryAssociation(int categoryId,boolean categoryIdSpecified,int subCategoryId,boolean subCategoryIdSpecified){
        return AddCategorySubCategoryAssociation(categoryId, categoryIdSpecified, subCategoryId, subCategoryIdSpecified, null);
    }
    
    public Output AddCategorySubCategoryAssociation(int categoryId,boolean categoryIdSpecified,int subCategoryId,boolean subCategoryIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddCategorySubCategoryAssociation");
        soapReq.addProperty("categoryId",categoryId);
        soapReq.addProperty("categoryIdSpecified",categoryIdSpecified);
        soapReq.addProperty("subCategoryId",subCategoryId);
        soapReq.addProperty("subCategoryIdSpecified",subCategoryIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddCategorySubCategoryAssociation", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddCategorySubCategoryAssociation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllCategoriesBySubCategoryIdAsync(int subCategoryId,boolean subCategoryIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllCategoriesBySubCategoryIdAsync(subCategoryId, subCategoryIdSpecified, null);
    }
    
    public void GetAllCategoriesBySubCategoryIdAsync(final int subCategoryId,final boolean subCategoryIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllCategoriesBySubCategoryId(subCategoryId, subCategoryIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllCategoriesBySubCategoryId", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllCategoriesBySubCategoryId(int subCategoryId,boolean subCategoryIdSpecified){
        return GetAllCategoriesBySubCategoryId(subCategoryId, subCategoryIdSpecified, null);
    }
    
    public Output GetAllCategoriesBySubCategoryId(int subCategoryId,boolean subCategoryIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllCategoriesBySubCategoryId");
        soapReq.addProperty("subCategoryId",subCategoryId);
        soapReq.addProperty("subCategoryIdSpecified",subCategoryIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllCategoriesBySubCategoryId", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllCategoriesBySubCategoryId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllSubCategoriesByCategoryIdAsync(int categoryId,boolean categoryIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllSubCategoriesByCategoryIdAsync(categoryId, categoryIdSpecified, null);
    }
    
    public void GetAllSubCategoriesByCategoryIdAsync(final int categoryId,final boolean categoryIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllSubCategoriesByCategoryId(categoryId, categoryIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllSubCategoriesByCategoryId", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllSubCategoriesByCategoryId(int categoryId,boolean categoryIdSpecified){
        return GetAllSubCategoriesByCategoryId(categoryId, categoryIdSpecified, null);
    }
    
    public Output GetAllSubCategoriesByCategoryId(int categoryId,boolean categoryIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllSubCategoriesByCategoryId");
        soapReq.addProperty("categoryId",categoryId);
        soapReq.addProperty("categoryIdSpecified",categoryIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllSubCategoriesByCategoryId", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllSubCategoriesByCategoryId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddRestrictionAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddRestrictionAsync(json, null);
    }
    
    public void AddRestrictionAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddRestriction(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddRestriction", result);
                }
            }
        }.execute();
    }
    
    public Output AddRestriction(String json){
        return AddRestriction(json, null);
    }
    
    public Output AddRestriction(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddRestriction");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddRestriction", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddRestriction", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllRestrictionsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllRestrictionsAsync(null);
    }
    
    public void GetAllRestrictionsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllRestrictions(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllRestrictions", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllRestrictions(){
        return GetAllRestrictions(null);
    }
    
    public Output GetAllRestrictions(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllRestrictions");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllRestrictions", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllRestrictions", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddFacilityAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddFacilityAsync(json, null);
    }
    
    public void AddFacilityAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddFacility(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddFacility", result);
                }
            }
        }.execute();
    }
    
    public Output AddFacility(String json){
        return AddFacility(json, null);
    }
    
    public Output AddFacility(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddFacility");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddFacility", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddFacility", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllFacilitiesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllFacilitiesAsync(null);
    }
    
    public void GetAllFacilitiesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllFacilities(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllFacilities", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllFacilities(){
        return GetAllFacilities(null);
    }
    
    public Output GetAllFacilities(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllFacilities");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllFacilities", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllFacilities", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddRestrictionSubCategoryAssociationAsync(int restrictionId,boolean restrictionIdSpecified,int subCategoryId,boolean subCategoryIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddRestrictionSubCategoryAssociationAsync(restrictionId, restrictionIdSpecified, subCategoryId, subCategoryIdSpecified, null);
    }
    
    public void AddRestrictionSubCategoryAssociationAsync(final int restrictionId,final boolean restrictionIdSpecified,final int subCategoryId,final boolean subCategoryIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddRestrictionSubCategoryAssociation(restrictionId, restrictionIdSpecified, subCategoryId, subCategoryIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddRestrictionSubCategoryAssociation", result);
                }
            }
        }.execute();
    }
    
    public Output AddRestrictionSubCategoryAssociation(int restrictionId,boolean restrictionIdSpecified,int subCategoryId,boolean subCategoryIdSpecified){
        return AddRestrictionSubCategoryAssociation(restrictionId, restrictionIdSpecified, subCategoryId, subCategoryIdSpecified, null);
    }
    
    public Output AddRestrictionSubCategoryAssociation(int restrictionId,boolean restrictionIdSpecified,int subCategoryId,boolean subCategoryIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddRestrictionSubCategoryAssociation");
        soapReq.addProperty("restrictionId",restrictionId);
        soapReq.addProperty("restrictionIdSpecified",restrictionIdSpecified);
        soapReq.addProperty("subCategoryId",subCategoryId);
        soapReq.addProperty("subCategoryIdSpecified",subCategoryIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddRestrictionSubCategoryAssociation", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddRestrictionSubCategoryAssociation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllRestrictionsBySubCategoryIdAsync(int subCategoryId,boolean subCategoryIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllRestrictionsBySubCategoryIdAsync(subCategoryId, subCategoryIdSpecified, null);
    }
    
    public void GetAllRestrictionsBySubCategoryIdAsync(final int subCategoryId,final boolean subCategoryIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllRestrictionsBySubCategoryId(subCategoryId, subCategoryIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllRestrictionsBySubCategoryId", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllRestrictionsBySubCategoryId(int subCategoryId,boolean subCategoryIdSpecified){
        return GetAllRestrictionsBySubCategoryId(subCategoryId, subCategoryIdSpecified, null);
    }
    
    public Output GetAllRestrictionsBySubCategoryId(int subCategoryId,boolean subCategoryIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllRestrictionsBySubCategoryId");
        soapReq.addProperty("subCategoryId",subCategoryId);
        soapReq.addProperty("subCategoryIdSpecified",subCategoryIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllRestrictionsBySubCategoryId", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllRestrictionsBySubCategoryId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddFacilitySubCategoryAssociationAsync(int facilityId,boolean facilityIdSpecified,int subCategoryId,boolean subCategoryIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddFacilitySubCategoryAssociationAsync(facilityId, facilityIdSpecified, subCategoryId, subCategoryIdSpecified, null);
    }
    
    public void AddFacilitySubCategoryAssociationAsync(final int facilityId,final boolean facilityIdSpecified,final int subCategoryId,final boolean subCategoryIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddFacilitySubCategoryAssociation(facilityId, facilityIdSpecified, subCategoryId, subCategoryIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddFacilitySubCategoryAssociation", result);
                }
            }
        }.execute();
    }
    
    public Output AddFacilitySubCategoryAssociation(int facilityId,boolean facilityIdSpecified,int subCategoryId,boolean subCategoryIdSpecified){
        return AddFacilitySubCategoryAssociation(facilityId, facilityIdSpecified, subCategoryId, subCategoryIdSpecified, null);
    }
    
    public Output AddFacilitySubCategoryAssociation(int facilityId,boolean facilityIdSpecified,int subCategoryId,boolean subCategoryIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddFacilitySubCategoryAssociation");
        soapReq.addProperty("facilityId",facilityId);
        soapReq.addProperty("facilityIdSpecified",facilityIdSpecified);
        soapReq.addProperty("subCategoryId",subCategoryId);
        soapReq.addProperty("subCategoryIdSpecified",subCategoryIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddFacilitySubCategoryAssociation", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddFacilitySubCategoryAssociation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllFacilitiesBySubCategoryIdAsync(int subCategoryId,boolean subCategoryIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllFacilitiesBySubCategoryIdAsync(subCategoryId, subCategoryIdSpecified, null);
    }
    
    public void GetAllFacilitiesBySubCategoryIdAsync(final int subCategoryId,final boolean subCategoryIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllFacilitiesBySubCategoryId(subCategoryId, subCategoryIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllFacilitiesBySubCategoryId", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllFacilitiesBySubCategoryId(int subCategoryId,boolean subCategoryIdSpecified){
        return GetAllFacilitiesBySubCategoryId(subCategoryId, subCategoryIdSpecified, null);
    }
    
    public Output GetAllFacilitiesBySubCategoryId(int subCategoryId,boolean subCategoryIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllFacilitiesBySubCategoryId");
        soapReq.addProperty("subCategoryId",subCategoryId);
        soapReq.addProperty("subCategoryIdSpecified",subCategoryIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllFacilitiesBySubCategoryId", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllFacilitiesBySubCategoryId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddRouteAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddRouteAsync(json, null);
    }
    
    public void AddRouteAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddRoute(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddRoute", result);
                }
            }
        }.execute();
    }
    
    public Output AddRoute(String json){
        return AddRoute(json, null);
    }
    
    public Output AddRoute(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddRoute");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddRoute", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddRoute", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdateRouteAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateRouteAsync(json, null);
    }
    
    public void UpdateRouteAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return UpdateRoute(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateRoute", result);
                }
            }
        }.execute();
    }
    
    public Output UpdateRoute(String json){
        return UpdateRoute(json, null);
    }
    
    public Output UpdateRoute(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","UpdateRoute");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/UpdateRoute", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/UpdateRoute", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetRouteByIdAsync(int routeId,boolean routeIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetRouteByIdAsync(routeId, routeIdSpecified, null);
    }
    
    public void GetRouteByIdAsync(final int routeId,final boolean routeIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetRouteById(routeId, routeIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetRouteById", result);
                }
            }
        }.execute();
    }
    
    public Output GetRouteById(int routeId,boolean routeIdSpecified){
        return GetRouteById(routeId, routeIdSpecified, null);
    }
    
    public Output GetRouteById(int routeId,boolean routeIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetRouteById");
        soapReq.addProperty("routeId",routeId);
        soapReq.addProperty("routeIdSpecified",routeIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetRouteById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetRouteById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllRoutesByUserIdAsync(int userId,boolean userIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllRoutesByUserIdAsync(userId, userIdSpecified, null);
    }
    
    public void GetAllRoutesByUserIdAsync(final int userId,final boolean userIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllRoutesByUserId(userId, userIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllRoutesByUserId", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllRoutesByUserId(int userId,boolean userIdSpecified){
        return GetAllRoutesByUserId(userId, userIdSpecified, null);
    }
    
    public Output GetAllRoutesByUserId(int userId,boolean userIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllRoutesByUserId");
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("userIdSpecified",userIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllRoutesByUserId", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllRoutesByUserId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllRoutesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllRoutesAsync(null);
    }
    
    public void GetAllRoutesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllRoutes(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllRoutes", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllRoutes(){
        return GetAllRoutes(null);
    }
    
    public Output GetAllRoutes(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllRoutes");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllRoutes", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllRoutes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetComplexRouteByIdAsync(int routeId,boolean routeIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetComplexRouteByIdAsync(routeId, routeIdSpecified, null);
    }
    
    public void GetComplexRouteByIdAsync(final int routeId,final boolean routeIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetComplexRouteById(routeId, routeIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetComplexRouteById", result);
                }
            }
        }.execute();
    }
    
    public Output GetComplexRouteById(int routeId,boolean routeIdSpecified){
        return GetComplexRouteById(routeId, routeIdSpecified, null);
    }
    
    public Output GetComplexRouteById(int routeId,boolean routeIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetComplexRouteById");
        soapReq.addProperty("routeId",routeId);
        soapReq.addProperty("routeIdSpecified",routeIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetComplexRouteById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetComplexRouteById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllComplexRoutesByUserIdAsync(int userId,boolean userIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllComplexRoutesByUserIdAsync(userId, userIdSpecified, null);
    }
    
    public void GetAllComplexRoutesByUserIdAsync(final int userId,final boolean userIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllComplexRoutesByUserId(userId, userIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllComplexRoutesByUserId", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllComplexRoutesByUserId(int userId,boolean userIdSpecified){
        return GetAllComplexRoutesByUserId(userId, userIdSpecified, null);
    }
    
    public Output GetAllComplexRoutesByUserId(int userId,boolean userIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllComplexRoutesByUserId");
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("userIdSpecified",userIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllComplexRoutesByUserId", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllComplexRoutesByUserId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void BuildRouteAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        BuildRouteAsync(json, null);
    }
    
    public void BuildRouteAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return BuildRoute(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("BuildRoute", result);
                }
            }
        }.execute();
    }
    
    public Output BuildRoute(String json){
        return BuildRoute(json, null);
    }
    
    public Output BuildRoute(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","BuildRoute");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/BuildRoute", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/BuildRoute", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddPointAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddPointAsync(json, null);
    }
    
    public void AddPointAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddPoint(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddPoint", result);
                }
            }
        }.execute();
    }
    
    public Output AddPoint(String json){
        return AddPoint(json, null);
    }
    
    public Output AddPoint(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddPoint");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddPoint", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddPoint", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdatePointAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdatePointAsync(json, null);
    }
    
    public void UpdatePointAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return UpdatePoint(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdatePoint", result);
                }
            }
        }.execute();
    }
    
    public Output UpdatePoint(String json){
        return UpdatePoint(json, null);
    }
    
    public Output UpdatePoint(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","UpdatePoint");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/UpdatePoint", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/UpdatePoint", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetPointByIdAsync(int pointId,boolean pointIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPointByIdAsync(pointId, pointIdSpecified, null);
    }
    
    public void GetPointByIdAsync(final int pointId,final boolean pointIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetPointById(pointId, pointIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetPointById", result);
                }
            }
        }.execute();
    }
    
    public Output GetPointById(int pointId,boolean pointIdSpecified){
        return GetPointById(pointId, pointIdSpecified, null);
    }
    
    public Output GetPointById(int pointId,boolean pointIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetPointById");
        soapReq.addProperty("pointId",pointId);
        soapReq.addProperty("pointIdSpecified",pointIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetPointById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetPointById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllPointsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllPointsAsync(null);
    }
    
    public void GetAllPointsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllPoints(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllPoints", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllPoints(){
        return GetAllPoints(null);
    }
    
    public Output GetAllPoints(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllPoints");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllPoints", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllPoints", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllPointsByPositionAndRadiusAsync(double lat,boolean latSpecified,double lng,boolean lngSpecified,double radius,boolean radiusSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllPointsByPositionAndRadiusAsync(lat, latSpecified, lng, lngSpecified, radius, radiusSpecified, null);
    }
    
    public void GetAllPointsByPositionAndRadiusAsync(final double lat,final boolean latSpecified,final double lng,final boolean lngSpecified,final double radius,final boolean radiusSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllPointsByPositionAndRadius(lat, latSpecified, lng, lngSpecified, radius, radiusSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllPointsByPositionAndRadius", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllPointsByPositionAndRadius(double lat,boolean latSpecified,double lng,boolean lngSpecified,double radius,boolean radiusSpecified){
        return GetAllPointsByPositionAndRadius(lat, latSpecified, lng, lngSpecified, radius, radiusSpecified, null);
    }
    
    public Output GetAllPointsByPositionAndRadius(double lat,boolean latSpecified,double lng,boolean lngSpecified,double radius,boolean radiusSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllPointsByPositionAndRadius");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("lat",lat);
        soapReq.addProperty("latSpecified",latSpecified);
        soapReq.addProperty("lng",lng);
        soapReq.addProperty("lngSpecified",lngSpecified);
        soapReq.addProperty("radius",radius);
        soapReq.addProperty("radiusSpecified",radiusSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllPointsByPositionAndRadius", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllPointsByPositionAndRadius", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddCityAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddCityAsync(json, null);
    }
    
    public void AddCityAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddCity(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddCity", result);
                }
            }
        }.execute();
    }
    
    public Output AddCity(String json){
        return AddCity(json, null);
    }
    
    public Output AddCity(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddCity");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddCity", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddCity", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdateCityAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateCityAsync(json, null);
    }
    
    public void UpdateCityAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return UpdateCity(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateCity", result);
                }
            }
        }.execute();
    }
    
    public Output UpdateCity(String json){
        return UpdateCity(json, null);
    }
    
    public Output UpdateCity(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","UpdateCity");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/UpdateCity", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/UpdateCity", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DeleteCityAsync(int cityId,boolean cityIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteCityAsync(cityId, cityIdSpecified, null);
    }
    
    public void DeleteCityAsync(final int cityId,final boolean cityIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return DeleteCity(cityId, cityIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DeleteCity", result);
                }
            }
        }.execute();
    }
    
    public Output DeleteCity(int cityId,boolean cityIdSpecified){
        return DeleteCity(cityId, cityIdSpecified, null);
    }
    
    public Output DeleteCity(int cityId,boolean cityIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","DeleteCity");
        soapReq.addProperty("cityId",cityId);
        soapReq.addProperty("cityIdSpecified",cityIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/DeleteCity", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/DeleteCity", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetCityByIdAsync(int cityId,boolean cityIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCityByIdAsync(cityId, cityIdSpecified, null);
    }
    
    public void GetCityByIdAsync(final int cityId,final boolean cityIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetCityById(cityId, cityIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetCityById", result);
                }
            }
        }.execute();
    }
    
    public Output GetCityById(int cityId,boolean cityIdSpecified){
        return GetCityById(cityId, cityIdSpecified, null);
    }
    
    public Output GetCityById(int cityId,boolean cityIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetCityById");
        soapReq.addProperty("cityId",cityId);
        soapReq.addProperty("cityIdSpecified",cityIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetCityById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetCityById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllCitiesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllCitiesAsync(null);
    }
    
    public void GetAllCitiesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllCities(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllCities", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllCities(){
        return GetAllCities(null);
    }
    
    public Output GetAllCities(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllCities");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllCities", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllCities", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddStreetAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddStreetAsync(json, null);
    }
    
    public void AddStreetAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddStreet(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddStreet", result);
                }
            }
        }.execute();
    }
    
    public Output AddStreet(String json){
        return AddStreet(json, null);
    }
    
    public Output AddStreet(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddStreet");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddStreet", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddStreet", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetStreetByIdAsync(int streetId,boolean streetIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStreetByIdAsync(streetId, streetIdSpecified, null);
    }
    
    public void GetStreetByIdAsync(final int streetId,final boolean streetIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetStreetById(streetId, streetIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStreetById", result);
                }
            }
        }.execute();
    }
    
    public Output GetStreetById(int streetId,boolean streetIdSpecified){
        return GetStreetById(streetId, streetIdSpecified, null);
    }
    
    public Output GetStreetById(int streetId,boolean streetIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetStreetById");
        soapReq.addProperty("streetId",streetId);
        soapReq.addProperty("streetIdSpecified",streetIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetStreetById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetStreetById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllStreetsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllStreetsAsync(null);
    }
    
    public void GetAllStreetsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllStreets(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllStreets", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllStreets(){
        return GetAllStreets(null);
    }
    
    public Output GetAllStreets(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllStreets");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllStreets", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllStreets", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddNeighborhoodAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddNeighborhoodAsync(json, null);
    }
    
    public void AddNeighborhoodAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddNeighborhood(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddNeighborhood", result);
                }
            }
        }.execute();
    }
    
    public Output AddNeighborhood(String json){
        return AddNeighborhood(json, null);
    }
    
    public Output AddNeighborhood(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddNeighborhood");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddNeighborhood", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddNeighborhood", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetNeighborhoodByIdAsync(int neighborhoodId,boolean neighborhoodIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetNeighborhoodByIdAsync(neighborhoodId, neighborhoodIdSpecified, null);
    }
    
    public void GetNeighborhoodByIdAsync(final int neighborhoodId,final boolean neighborhoodIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetNeighborhoodById(neighborhoodId, neighborhoodIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetNeighborhoodById", result);
                }
            }
        }.execute();
    }
    
    public Output GetNeighborhoodById(int neighborhoodId,boolean neighborhoodIdSpecified){
        return GetNeighborhoodById(neighborhoodId, neighborhoodIdSpecified, null);
    }
    
    public Output GetNeighborhoodById(int neighborhoodId,boolean neighborhoodIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetNeighborhoodById");
        soapReq.addProperty("neighborhoodId",neighborhoodId);
        soapReq.addProperty("neighborhoodIdSpecified",neighborhoodIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetNeighborhoodById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetNeighborhoodById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllNeighborhoodsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllNeighborhoodsAsync(null);
    }
    
    public void GetAllNeighborhoodsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllNeighborhoods(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllNeighborhoods", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllNeighborhoods(){
        return GetAllNeighborhoods(null);
    }
    
    public Output GetAllNeighborhoods(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllNeighborhoods");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllNeighborhoods", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllNeighborhoods", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddBuildingAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddBuildingAsync(json, null);
    }
    
    public void AddBuildingAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddBuilding(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddBuilding", result);
                }
            }
        }.execute();
    }
    
    public Output AddBuilding(String json){
        return AddBuilding(json, null);
    }
    
    public Output AddBuilding(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddBuilding");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddBuilding", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddBuilding", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetBuildingByIdAsync(int id,boolean idSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetBuildingByIdAsync(id, idSpecified, null);
    }
    
    public void GetBuildingByIdAsync(final int id,final boolean idSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetBuildingById(id, idSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetBuildingById", result);
                }
            }
        }.execute();
    }
    
    public Output GetBuildingById(int id,boolean idSpecified){
        return GetBuildingById(id, idSpecified, null);
    }
    
    public Output GetBuildingById(int id,boolean idSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetBuildingById");
        soapReq.addProperty("id",id);
        soapReq.addProperty("idSpecified",idSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetBuildingById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetBuildingById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllBuildingsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllBuildingsAsync(null);
    }
    
    public void GetAllBuildingsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllBuildings(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllBuildings", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllBuildings(){
        return GetAllBuildings(null);
    }
    
    public Output GetAllBuildings(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllBuildings");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllBuildings", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllBuildings", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddStateAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddStateAsync(json, null);
    }
    
    public void AddStateAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddState(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddState", result);
                }
            }
        }.execute();
    }
    
    public Output AddState(String json){
        return AddState(json, null);
    }
    
    public Output AddState(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddState");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddState", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddState", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetStateByIdAsync(int stateId,boolean stateIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStateByIdAsync(stateId, stateIdSpecified, null);
    }
    
    public void GetStateByIdAsync(final int stateId,final boolean stateIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetStateById(stateId, stateIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStateById", result);
                }
            }
        }.execute();
    }
    
    public Output GetStateById(int stateId,boolean stateIdSpecified){
        return GetStateById(stateId, stateIdSpecified, null);
    }
    
    public Output GetStateById(int stateId,boolean stateIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetStateById");
        soapReq.addProperty("stateId",stateId);
        soapReq.addProperty("stateIdSpecified",stateIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetStateById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetStateById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllStatesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllStatesAsync(null);
    }
    
    public void GetAllStatesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllStates(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllStates", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllStates(){
        return GetAllStates(null);
    }
    
    public Output GetAllStates(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllStates");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllStates", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllStates", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddCountryAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddCountryAsync(json, null);
    }
    
    public void AddCountryAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddCountry(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddCountry", result);
                }
            }
        }.execute();
    }
    
    public Output AddCountry(String json){
        return AddCountry(json, null);
    }
    
    public Output AddCountry(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddCountry");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddCountry", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddCountry", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetCountryByIdAsync(int countryId,boolean countryIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCountryByIdAsync(countryId, countryIdSpecified, null);
    }
    
    public void GetCountryByIdAsync(final int countryId,final boolean countryIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetCountryById(countryId, countryIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetCountryById", result);
                }
            }
        }.execute();
    }
    
    public Output GetCountryById(int countryId,boolean countryIdSpecified){
        return GetCountryById(countryId, countryIdSpecified, null);
    }
    
    public Output GetCountryById(int countryId,boolean countryIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetCountryById");
        soapReq.addProperty("countryId",countryId);
        soapReq.addProperty("countryIdSpecified",countryIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetCountryById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetCountryById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void User_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        User_DummyAsync(null);
    }
    
    public void User_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, User>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected User doInBackground(Void... params) {
                return User_Dummy(headers);
            }
            @Override
            protected void onPostExecute(User result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("User_Dummy", result);
                }
            }
        }.execute();
    }
    
    public User User_Dummy(){
        return User_Dummy(null);
    }
    
    public User User_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","User_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/User_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/User_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    User resultVariable =  new User (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Route_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Route_DummyAsync(null);
    }
    
    public void Route_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Route>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Route doInBackground(Void... params) {
                return Route_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Route result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Route_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Route Route_Dummy(){
        return Route_Dummy(null);
    }
    
    public Route Route_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Route_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Route_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Route_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Route resultVariable =  new Route (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Point_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Point_DummyAsync(null);
    }
    
    public void Point_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Point>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Point doInBackground(Void... params) {
                return Point_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Point result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Point_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Point Point_Dummy(){
        return Point_Dummy(null);
    }
    
    public Point Point_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Point_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Point_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Point_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Point resultVariable =  new Point (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void City_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        City_DummyAsync(null);
    }
    
    public void City_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, City>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected City doInBackground(Void... params) {
                return City_Dummy(headers);
            }
            @Override
            protected void onPostExecute(City result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("City_Dummy", result);
                }
            }
        }.execute();
    }
    
    public City City_Dummy(){
        return City_Dummy(null);
    }
    
    public City City_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","City_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/City_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/City_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    City resultVariable =  new City (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Street_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Street_DummyAsync(null);
    }
    
    public void Street_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Street>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Street doInBackground(Void... params) {
                return Street_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Street result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Street_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Street Street_Dummy(){
        return Street_Dummy(null);
    }
    
    public Street Street_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Street_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Street_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Street_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Street resultVariable =  new Street (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Neighborhood_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Neighborhood_DummyAsync(null);
    }
    
    public void Neighborhood_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Neighborhood>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Neighborhood doInBackground(Void... params) {
                return Neighborhood_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Neighborhood result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Neighborhood_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Neighborhood Neighborhood_Dummy(){
        return Neighborhood_Dummy(null);
    }
    
    public Neighborhood Neighborhood_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Neighborhood_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Neighborhood_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Neighborhood_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Neighborhood resultVariable =  new Neighborhood (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void State_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        State_DummyAsync(null);
    }
    
    public void State_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, State>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected State doInBackground(Void... params) {
                return State_Dummy(headers);
            }
            @Override
            protected void onPostExecute(State result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("State_Dummy", result);
                }
            }
        }.execute();
    }
    
    public State State_Dummy(){
        return State_Dummy(null);
    }
    
    public State State_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","State_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/State_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/State_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    State resultVariable =  new State (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Country_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Country_DummyAsync(null);
    }
    
    public void Country_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Country>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Country doInBackground(Void... params) {
                return Country_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Country result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Country_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Country Country_Dummy(){
        return Country_Dummy(null);
    }
    
    public Country Country_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Country_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Country_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Country_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Country resultVariable =  new Country (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Category_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Category_DummyAsync(null);
    }
    
    public void Category_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Category>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Category doInBackground(Void... params) {
                return Category_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Category result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Category_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Category Category_Dummy(){
        return Category_Dummy(null);
    }
    
    public Category Category_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Category_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Category_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Category_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Category resultVariable =  new Category (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void SubCategory_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SubCategory_DummyAsync(null);
    }
    
    public void SubCategory_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, SubCategory>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected SubCategory doInBackground(Void... params) {
                return SubCategory_Dummy(headers);
            }
            @Override
            protected void onPostExecute(SubCategory result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SubCategory_Dummy", result);
                }
            }
        }.execute();
    }
    
    public SubCategory SubCategory_Dummy(){
        return SubCategory_Dummy(null);
    }
    
    public SubCategory SubCategory_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","SubCategory_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/SubCategory_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/SubCategory_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    SubCategory resultVariable =  new SubCategory (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void SubCategoryType_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SubCategoryType_DummyAsync(null);
    }
    
    public void SubCategoryType_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, SubCategoryType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected SubCategoryType doInBackground(Void... params) {
                return SubCategoryType_Dummy(headers);
            }
            @Override
            protected void onPostExecute(SubCategoryType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SubCategoryType_Dummy", result);
                }
            }
        }.execute();
    }
    
    public SubCategoryType SubCategoryType_Dummy(){
        return SubCategoryType_Dummy(null);
    }
    
    public SubCategoryType SubCategoryType_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","SubCategoryType_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/SubCategoryType_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/SubCategoryType_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    SubCategoryType resultVariable =  new SubCategoryType (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Restriction_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Restriction_DummyAsync(null);
    }
    
    public void Restriction_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Restriction>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Restriction doInBackground(Void... params) {
                return Restriction_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Restriction result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Restriction_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Restriction Restriction_Dummy(){
        return Restriction_Dummy(null);
    }
    
    public Restriction Restriction_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Restriction_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Restriction_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Restriction_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Restriction resultVariable =  new Restriction (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Facility_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Facility_DummyAsync(null);
    }
    
    public void Facility_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Facility>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Facility doInBackground(Void... params) {
                return Facility_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Facility result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Facility_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Facility Facility_Dummy(){
        return Facility_Dummy(null);
    }
    
    public Facility Facility_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Facility_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Facility_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Facility_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Facility resultVariable =  new Facility (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Building_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Building_DummyAsync(null);
    }
    
    public void Building_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Building>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Building doInBackground(Void... params) {
                return Building_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Building result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Building_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Building Building_Dummy(){
        return Building_Dummy(null);
    }
    
    public Building Building_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Building_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Building_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Building_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Building resultVariable =  new Building (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Complex_Route_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Complex_Route_DummyAsync(null);
    }
    
    public void Complex_Route_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Complex_Route>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Complex_Route doInBackground(Void... params) {
                return Complex_Route_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Complex_Route result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Complex_Route_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Complex_Route Complex_Route_Dummy(){
        return Complex_Route_Dummy(null);
    }
    
    public Complex_Route Complex_Route_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Complex_Route_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Complex_Route_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Complex_Route_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Complex_Route resultVariable =  new Complex_Route (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void Complex_Point_DummyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        Complex_Point_DummyAsync(null);
    }
    
    public void Complex_Point_DummyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Complex_Point>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Complex_Point doInBackground(Void... params) {
                return Complex_Point_Dummy(headers);
            }
            @Override
            protected void onPostExecute(Complex_Point result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Complex_Point_Dummy", result);
                }
            }
        }.execute();
    }
    
    public Complex_Point Complex_Point_Dummy(){
        return Complex_Point_Dummy(null);
    }
    
    public Complex_Point Complex_Point_Dummy(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Complex_Point_Dummy");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Complex_Point_Dummy", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Complex_Point_Dummy", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Complex_Point resultVariable =  new Complex_Point (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void IndentAsync(boolean indented,boolean indentedSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        IndentAsync(indented, indentedSpecified, null);
    }
    
    public void IndentAsync(final boolean indented,final boolean indentedSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return Indent(indented, indentedSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Indent", result);
                }
            }
        }.execute();
    }
    
    public Output Indent(boolean indented,boolean indentedSpecified){
        return Indent(indented, indentedSpecified, null);
    }
    
    public Output Indent(boolean indented,boolean indentedSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Indent");
        soapReq.addProperty("indented",indented);
        soapReq.addProperty("indentedSpecified",indentedSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Indent", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Indent", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ReloadAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ReloadAsync(null);
    }
    
    public void ReloadAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return Reload(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Reload", result);
                }
            }
        }.execute();
    }
    
    public Output Reload(){
        return Reload(null);
    }
    
    public Output Reload(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","Reload");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/Reload", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/Reload", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void CreateDatabaseAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CreateDatabaseAsync(null);
    }
    
    public void CreateDatabaseAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return CreateDatabase(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CreateDatabase", result);
                }
            }
        }.execute();
    }
    
    public Output CreateDatabase(){
        return CreateDatabase(null);
    }
    
    public Output CreateDatabase(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","CreateDatabase");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/CreateDatabase", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/CreateDatabase", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void AddUserAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddUserAsync(json, null);
    }
    
    public void AddUserAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return AddUser(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("AddUser", result);
                }
            }
        }.execute();
    }
    
    public Output AddUser(String json){
        return AddUser(json, null);
    }
    
    public Output AddUser(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","AddUser");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/AddUser", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/AddUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdateUserAsync(String json) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateUserAsync(json, null);
    }
    
    public void UpdateUserAsync(final String json,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return UpdateUser(json, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateUser", result);
                }
            }
        }.execute();
    }
    
    public Output UpdateUser(String json){
        return UpdateUser(json, null);
    }
    
    public Output UpdateUser(String json,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","UpdateUser");
        soapReq.addProperty("json",json);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/UpdateUser", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/UpdateUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DeleteUserAsync(int userId,boolean userIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteUserAsync(userId, userIdSpecified, null);
    }
    
    public void DeleteUserAsync(final int userId,final boolean userIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return DeleteUser(userId, userIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DeleteUser", result);
                }
            }
        }.execute();
    }
    
    public Output DeleteUser(int userId,boolean userIdSpecified){
        return DeleteUser(userId, userIdSpecified, null);
    }
    
    public Output DeleteUser(int userId,boolean userIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","DeleteUser");
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("userIdSpecified",userIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/DeleteUser", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/DeleteUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetUserByIdAsync(int userId,boolean userIdSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserByIdAsync(userId, userIdSpecified, null);
    }
    
    public void GetUserByIdAsync(final int userId,final boolean userIdSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetUserById(userId, userIdSpecified, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUserById", result);
                }
            }
        }.execute();
    }
    
    public Output GetUserById(int userId,boolean userIdSpecified){
        return GetUserById(userId, userIdSpecified, null);
    }
    
    public Output GetUserById(int userId,boolean userIdSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetUserById");
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("userIdSpecified",userIdSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetUserById", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetUserById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetUserByEmailAndPasswordAsync(String email,String password) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserByEmailAndPasswordAsync(email, password, null);
    }
    
    public void GetUserByEmailAndPasswordAsync(final String email,final String password,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetUserByEmailAndPassword(email, password, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUserByEmailAndPassword", result);
                }
            }
        }.execute();
    }
    
    public Output GetUserByEmailAndPassword(String email,String password){
        return GetUserByEmailAndPassword(email, password, null);
    }
    
    public Output GetUserByEmailAndPassword(String email,String password,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetUserByEmailAndPassword");
        soapReq.addProperty("email",email);
        soapReq.addProperty("password",password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetUserByEmailAndPassword", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetUserByEmailAndPassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetUserByEmailAsync(String email) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserByEmailAsync(email, null);
    }
    
    public void GetUserByEmailAsync(final String email,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetUserByEmail(email, headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUserByEmail", result);
                }
            }
        }.execute();
    }
    
    public Output GetUserByEmail(String email){
        return GetUserByEmail(email, null);
    }
    
    public Output GetUserByEmail(String email,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetUserByEmail");
        soapReq.addProperty("email",email);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetUserByEmail", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetUserByEmail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllUsersAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllUsersAsync(null);
    }
    
    public void GetAllUsersAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Output>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Output doInBackground(Void... params) {
                return GetAllUsers(headers);
            }
            @Override
            protected void onPostExecute(Output result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllUsers", result);
                }
            }
        }.execute();
    }
    
    public Output GetAllUsers(){
        return GetAllUsers(null);
    }
    
    public Output GetAllUsers(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("CTwalkService","GetAllUsers");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("CTwalkService/ICTwalkService/GetAllUsers", soapEnvelope,headers);
            }else{
                httpTransport.call("CTwalkService/ICTwalkService/GetAllUsers", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Output resultVariable =  new Output (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
