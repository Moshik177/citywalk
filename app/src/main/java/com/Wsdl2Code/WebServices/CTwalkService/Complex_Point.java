package com.Wsdl2Code.WebServices.CTwalkService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 11/23/2015 2:51:36 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.CTwalkService.VectorFacility;
import com.Wsdl2Code.WebServices.CTwalkService.VectorRestriction;
import com.Wsdl2Code.WebServices.CTwalkService.VectorSubCategory;
import com.Wsdl2Code.WebServices.CTwalkService.VectorSubCategoryType;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import java.util.List;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class Complex_Point implements KvmSerializable {
    
    public String Budget;
    public int CityId;
    public boolean CityIdSpecified;
    public List<Facility> Facilities;
    public String HouseNumber;
    public double Lat;
    public boolean LatSpecified;
    public double Lng;
    public boolean LngSpecified;
    public String LocalName;
    public String Name;
    public int NeighborhoodId;
    public boolean NeighborhoodIdSpecified;
    public int NumberOfRates;
    public boolean NumberOfRatesSpecified;
    public int PointId;
    public boolean PointIdSpecified;
    public int Rating;
    public boolean RatingSpecified;
    public List<Restriction> Restrictions;
    public int StreetId;
    public boolean StreetIdSpecified;
    public List<SubCategory> SubCategories;
    public List<SubCategoryType> Types;
    
    public Complex_Point(){}
    
    public Complex_Point(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Budget"))
        {
            Object obj = soapObject.getProperty("Budget");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Budget = j.toString();
            }else if (obj!= null && obj instanceof String){
                Budget = (String) obj;
            }
        }
        if (soapObject.hasProperty("CityId"))
        {
            Object obj = soapObject.getProperty("CityId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                CityId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                CityId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CityIdSpecified"))
        {
            Object obj = soapObject.getProperty("CityIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                CityIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                CityIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Facilities"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Facilities");
            Facilities = new VectorFacility(j);
        }
        if (soapObject.hasProperty("HouseNumber"))
        {
            Object obj = soapObject.getProperty("HouseNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                HouseNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                HouseNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("Lat"))
        {
            Object obj = soapObject.getProperty("Lat");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Lat = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                Lat = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LatSpecified"))
        {
            Object obj = soapObject.getProperty("LatSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                LatSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                LatSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Lng"))
        {
            Object obj = soapObject.getProperty("Lng");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Lng = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                Lng = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LngSpecified"))
        {
            Object obj = soapObject.getProperty("LngSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                LngSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                LngSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("LocalName"))
        {
            Object obj = soapObject.getProperty("LocalName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                LocalName = j.toString();
            }else if (obj!= null && obj instanceof String){
                LocalName = (String) obj;
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Name = j.toString();
            }else if (obj!= null && obj instanceof String){
                Name = (String) obj;
            }
        }
        if (soapObject.hasProperty("NeighborhoodId"))
        {
            Object obj = soapObject.getProperty("NeighborhoodId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                NeighborhoodId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                NeighborhoodId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NeighborhoodIdSpecified"))
        {
            Object obj = soapObject.getProperty("NeighborhoodIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                NeighborhoodIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                NeighborhoodIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("NumberOfRates"))
        {
            Object obj = soapObject.getProperty("NumberOfRates");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                NumberOfRates = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                NumberOfRates = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NumberOfRatesSpecified"))
        {
            Object obj = soapObject.getProperty("NumberOfRatesSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                NumberOfRatesSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                NumberOfRatesSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("PointId"))
        {
            Object obj = soapObject.getProperty("PointId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                PointId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                PointId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PointIdSpecified"))
        {
            Object obj = soapObject.getProperty("PointIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                PointIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                PointIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Rating"))
        {
            Object obj = soapObject.getProperty("Rating");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Rating = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                Rating = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("RatingSpecified"))
        {
            Object obj = soapObject.getProperty("RatingSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                RatingSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                RatingSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Restrictions"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Restrictions");
            Restrictions = new VectorRestriction(j);
        }
        if (soapObject.hasProperty("StreetId"))
        {
            Object obj = soapObject.getProperty("StreetId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                StreetId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                StreetId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StreetIdSpecified"))
        {
            Object obj = soapObject.getProperty("StreetIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                StreetIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                StreetIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("SubCategories"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("SubCategories");
            SubCategories = new VectorSubCategory(j);
        }
        if (soapObject.hasProperty("Types"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Types");
            Types = new VectorSubCategoryType(j);
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return Budget;
            case 1:
                return CityId;
            case 2:
                return CityIdSpecified;
            case 3:
                return Facilities;
            case 4:
                return HouseNumber;
            case 5:
                return Lat;
            case 6:
                return LatSpecified;
            case 7:
                return Lng;
            case 8:
                return LngSpecified;
            case 9:
                return LocalName;
            case 10:
                return Name;
            case 11:
                return NeighborhoodId;
            case 12:
                return NeighborhoodIdSpecified;
            case 13:
                return NumberOfRates;
            case 14:
                return NumberOfRatesSpecified;
            case 15:
                return PointId;
            case 16:
                return PointIdSpecified;
            case 17:
                return Rating;
            case 18:
                return RatingSpecified;
            case 19:
                return Restrictions;
            case 20:
                return StreetId;
            case 21:
                return StreetIdSpecified;
            case 22:
                return SubCategories;
            case 23:
                return Types;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 24;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawTypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Budget";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CityId";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "CityIdSpecified";
                break;
            case 3:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Facilities";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "HouseNumber";
                break;
            case 5:
                info.type = Double.class;
                info.name = "Lat";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "LatSpecified";
                break;
            case 7:
                info.type = Double.class;
                info.name = "Lng";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "LngSpecified";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LocalName";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "NeighborhoodId";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "NeighborhoodIdSpecified";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "NumberOfRates";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "NumberOfRatesSpecified";
                break;
            case 15:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PointId";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "PointIdSpecified";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Rating";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RatingSpecified";
                break;
            case 19:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Restrictions";
                break;
            case 20:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "StreetId";
                break;
            case 21:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "StreetIdSpecified";
                break;
            case 22:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "SubCategories";
                break;
            case 23:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Types";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
