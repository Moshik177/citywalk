package com.Wsdl2Code.WebServices.CTwalkService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 11/23/2015 2:51:36 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class Building implements KvmSerializable {
    
    public int CityId;
    public boolean CityIdSpecified;
    public String Geography;
    public int ID;
    public boolean IDSpecified;
    public String LocalName;
    public String Name;
    public int NeighborhoodId;
    public boolean NeighborhoodIdSpecified;
    public String Number;
    public int StreetId;
    public boolean StreetIdSpecified;
    
    public Building(){}
    
    public Building(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("CityId"))
        {
            Object obj = soapObject.getProperty("CityId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                CityId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                CityId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CityIdSpecified"))
        {
            Object obj = soapObject.getProperty("CityIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                CityIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                CityIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Geography"))
        {
            Object obj = soapObject.getProperty("Geography");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Geography = j.toString();
            }else if (obj!= null && obj instanceof String){
                Geography = (String) obj;
            }
        }
        if (soapObject.hasProperty("ID"))
        {
            Object obj = soapObject.getProperty("ID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ID = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                ID = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IDSpecified"))
        {
            Object obj = soapObject.getProperty("IDSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                IDSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                IDSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("LocalName"))
        {
            Object obj = soapObject.getProperty("LocalName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                LocalName = j.toString();
            }else if (obj!= null && obj instanceof String){
                LocalName = (String) obj;
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Name = j.toString();
            }else if (obj!= null && obj instanceof String){
                Name = (String) obj;
            }
        }
        if (soapObject.hasProperty("NeighborhoodId"))
        {
            Object obj = soapObject.getProperty("NeighborhoodId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                NeighborhoodId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                NeighborhoodId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NeighborhoodIdSpecified"))
        {
            Object obj = soapObject.getProperty("NeighborhoodIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                NeighborhoodIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                NeighborhoodIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Number"))
        {
            Object obj = soapObject.getProperty("Number");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Number = j.toString();
            }else if (obj!= null && obj instanceof String){
                Number = (String) obj;
            }
        }
        if (soapObject.hasProperty("StreetId"))
        {
            Object obj = soapObject.getProperty("StreetId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                StreetId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                StreetId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StreetIdSpecified"))
        {
            Object obj = soapObject.getProperty("StreetIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                StreetIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                StreetIdSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return CityId;
            case 1:
                return CityIdSpecified;
            case 2:
                return Geography;
            case 3:
                return ID;
            case 4:
                return IDSpecified;
            case 5:
                return LocalName;
            case 6:
                return Name;
            case 7:
                return NeighborhoodId;
            case 8:
                return NeighborhoodIdSpecified;
            case 9:
                return Number;
            case 10:
                return StreetId;
            case 11:
                return StreetIdSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 12;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CityId";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "CityIdSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Geography";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ID";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IDSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LocalName";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "NeighborhoodId";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "NeighborhoodIdSpecified";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Number";
                break;
            case 10:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "StreetId";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "StreetIdSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
