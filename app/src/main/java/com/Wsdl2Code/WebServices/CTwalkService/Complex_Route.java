package com.Wsdl2Code.WebServices.CTwalkService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 11/23/2015 2:51:36 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.CTwalkService.VectorComplex_Point;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import java.util.List;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class Complex_Route implements KvmSerializable {
    
    public String Directions;
    public int Distance;
    public boolean DistanceSpecified;
    public String EndAddress;
    public String EndPoint;
    public String EndPointLatLng;
    public String Line;
    public List<Complex_Point> Points;
    public int RouteId;
    public boolean RouteIdSpecified;
    public String RouteImage;
    public String StartAddress;
    public String StartPoint;
    public String StartPointLatLng;
    public int Time;
    public boolean TimeSpecified;
    public int UserId;
    public boolean UserIdSpecified;
    
    public Complex_Route(){}

    public Complex_Route(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Directions"))
        {
            Object obj = soapObject.getProperty("Directions");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Directions = j.toString();
            }else if (obj!= null && obj instanceof String){
                Directions = (String) obj;
            }
        }
        if (soapObject.hasProperty("Distance"))
        {
            Object obj = soapObject.getProperty("Distance");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Distance = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                Distance = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DistanceSpecified"))
        {
            Object obj = soapObject.getProperty("DistanceSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                DistanceSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                DistanceSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("EndAddress"))
        {
            Object obj = soapObject.getProperty("EndAddress");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                EndAddress = j.toString();
            }else if (obj!= null && obj instanceof String){
                EndAddress = (String) obj;
            }
        }
        if (soapObject.hasProperty("EndPoint"))
        {
            Object obj = soapObject.getProperty("EndPoint");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                EndPoint = j.toString();
            }else if (obj!= null && obj instanceof String){
                EndPoint = (String) obj;
            }
        }
        if (soapObject.hasProperty("EndPointLatLng"))
        {
            Object obj = soapObject.getProperty("EndPointLatLng");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                EndPointLatLng = j.toString();
            }else if (obj!= null && obj instanceof String){
                EndPointLatLng = (String) obj;
            }
        }
        if (soapObject.hasProperty("Line"))
        {
            Object obj = soapObject.getProperty("Line");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Line = j.toString();
            }else if (obj!= null && obj instanceof String){
                Line = (String) obj;
            }
        }
        if (soapObject.hasProperty("Points"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Points");
            Points = new VectorComplex_Point(j);
        }
        if (soapObject.hasProperty("RouteId"))
        {
            Object obj = soapObject.getProperty("RouteId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                RouteId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                RouteId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("RouteIdSpecified"))
        {
            Object obj = soapObject.getProperty("RouteIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                RouteIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                RouteIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("RouteImage"))
        {
            Object obj = soapObject.getProperty("RouteImage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                RouteImage = j.toString();
            }else if (obj!= null && obj instanceof String){
                RouteImage = (String) obj;
            }
        }
        if (soapObject.hasProperty("StartAddress"))
        {
            Object obj = soapObject.getProperty("StartAddress");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                StartAddress = j.toString();
            }else if (obj!= null && obj instanceof String){
                StartAddress = (String) obj;
            }
        }
        if (soapObject.hasProperty("StartPoint"))
        {
            Object obj = soapObject.getProperty("StartPoint");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                StartPoint = j.toString();
            }else if (obj!= null && obj instanceof String){
                StartPoint = (String) obj;
            }
        }
        if (soapObject.hasProperty("StartPointLatLng"))
        {
            Object obj = soapObject.getProperty("StartPointLatLng");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                StartPointLatLng = j.toString();
            }else if (obj!= null && obj instanceof String){
                StartPointLatLng = (String) obj;
            }
        }
        if (soapObject.hasProperty("Time"))
        {
            Object obj = soapObject.getProperty("Time");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                Time = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                Time = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("TimeSpecified"))
        {
            Object obj = soapObject.getProperty("TimeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                TimeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                TimeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("UserId"))
        {
            Object obj = soapObject.getProperty("UserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                UserId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                UserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("UserIdSpecified"))
        {
            Object obj = soapObject.getProperty("UserIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                UserIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                UserIdSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return Directions;
            case 1:
                return Distance;
            case 2:
                return DistanceSpecified;
            case 3:
                return EndAddress;
            case 4:
                return EndPoint;
            case 5:
                return EndPointLatLng;
            case 6:
                return Line;
            case 7:
                return Points;
            case 8:
                return RouteId;
            case 9:
                return RouteIdSpecified;
            case 10:
                return RouteImage;
            case 11:
                return StartAddress;
            case 12:
                return StartPoint;
            case 13:
                return StartPointLatLng;
            case 14:
                return Time;
            case 15:
                return TimeSpecified;
            case 16:
                return UserId;
            case 17:
                return UserIdSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 18;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Directions";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Distance";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DistanceSpecified";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "EndAddress";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "EndPoint";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "EndPointLatLng";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Line";
                break;
            case 7:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Points";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "RouteId";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RouteIdSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RouteImage";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StartAddress";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StartPoint";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StartPointLatLng";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Time";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TimeSpecified";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "UserId";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "UserIdSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
